int   LlamaCAAAREM (char *EnviaTrama20,  int  EnviaTramanl, char *EnviArchivo, char *RecibeTrama, short olEsNoPedimento)
{
  int    sockfd_CAAAREM;
  int    hacuse1 = 0, hacuse2 = 0, nacuse1 = 0,  nacuse2 = 0;
  struct sockaddr_in serv_addr_CAAAREM;
  int    EnviaTramanlhtonl, result;
  char **pptr;
  const char *ptr;
  struct hostent *hptr;
  char str[INET_ADDRSTRLEN], cadenaEnvio[68]="";
  int  EnviosI = 1;
  char xnumero[9]="";
  char xinvertido[9]="";
  char byte1[3]="";
  char byte2[3]="";
  char byte3[3]="";
  char byte4[3]="";
  char nombreArchivo[13]="";
  char charEnviosI[4]="", *ptrbloque = NULL;
  char strPreval[4]="";
  int  numPreval;
  char strDireccion[16]="";
  int   iIndAlterno=1;

  memset(cadenaEnvio,'\0',sizeof(cadenaEnvio));

  bzero((char *) &serv_addr_CAAAREM, sizeof(serv_addr_CAAAREM));

  fprintf(fptr1,"\n EnviaTrama20 <%s>,  int  EnviaTramanl <%d>, \n EnviArchivo <%s>,\n   RecibeTrama <%s>",
                               EnviaTrama20,  EnviaTramanl,
                               EnviArchivo,   RecibeTrama);

  snprintf(strPreval, 4, "%s", EnviaTrama20 + 17);
  strPreval[3] = '\0';
  fprintf(fptr1,"[LlamaCAAAREM] Prevalidador a validar <%s>\n", strPreval);
  numPreval = atoi((char *) strPreval);

  if( !(serv_tcp_caaarem=buscaPrevalidadoresCNF(numPreval,strDireccion)) )
  {
    iIndAlterno=1;
    fprintf(fptr1,"[LlamaCAAAREM] Error 1: No es posible resolver paquetes para el Prevalidador=%d Puerto=%d HOST[%s] Alterno=%d\n"
                 ,numPreval,serv_tcp_caaarem,strDireccion,iIndAlterno);
    fflush(fptr1);
    renombrarArchivoS(EnviaTrama20,fptr1);
    return 1;
  }
  fprintf(fptr1, " serv_tcp_caaarem <%d>\n", serv_tcp_caaarem);


  fprintf(fptr1,"[LlamaCAAAREM] Prevalidador a validar <%d> <%d> <%s>\n",numPreval,serv_tcp_caaarem,strDireccion);

  if ( (hptr = gethostbyname(strDireccion)) == NULL)
    {
      iIndAlterno=1;
      fprintf(fptr1,"[LlamaCAAAREM] Error 2: No se puede obtener la direccion del gethostbyname(%s) Puerto[%d] Alterno=%d\n"
	               ,strDireccion,serv_tcp_caaarem,iIndAlterno);
	  fflush(fptr1);
  	  renombrarArchivoS(EnviaTrama20,fptr1);
	  return 1;
    }
  else
    {
      pptr = hptr->h_addr_list;
      ptr = inet_ntop(AF_INET, *hptr->h_addr_list, str, sizeof(str));

      serv_addr_CAAAREM.sin_family = AF_INET;
      serv_addr_CAAAREM.sin_addr.s_addr = inet_addr(ptr);
      serv_addr_CAAAREM.sin_port = htons(serv_tcp_caaarem);
    }

  if ((sockfd_CAAAREM = socket(AF_INET, SOCK_STREAM, 0)) < 0)
  {
      iIndAlterno=1;
      fprintf(fptr1,"[LlamaCAAAREM] Error 3: No se puede abrir el socket stream HOST[%s] Puerto[%d] Alterno=%d\n"
	               ,strDireccion,serv_tcp_caaarem,iIndAlterno);
	  fflush(fptr1);
	  renombrarArchivoS(EnviaTrama20,fptr1);
	  return 1;
  }

  if (connect(sockfd_CAAAREM, (struct sockaddr *) &serv_addr_CAAAREM, sizeof(serv_addr_CAAAREM)) < 0)
  {
      iIndAlterno=1;
      fprintf(fptr1,"[LlamaCAAAREM] Error 4: No se puede hacer connect HOST[%s] Puerto[%d] Alterno=%d\n"
	               ,strDireccion,serv_tcp_caaarem,iIndAlterno);
	  fflush(fptr1);
	  renombrarArchivoS(EnviaTrama20,fptr1);
	  close(sockfd_CAAAREM);
	  return 1;
  }

  fprintf(fptr1,"Envia a prevalidador nombre archivo <%s>\n", EnviaTrama20);

  if ( (result=write (sockfd_CAAAREM, EnviaTrama20, 20)) < 0 )
  {
        iIndAlterno=1;
        fprintf(fptr1,"[LlamaCAAAREM] Error 5: No se escribio el nombre del archivo[%s] -write- HOST[%s] Puerto[%d] Alterno=%d result=%d\n"
	                 ,EnviaTrama20,strDireccion,serv_tcp_caaarem,iIndAlterno,result);
        fflush(fptr1);
	    renombrarArchivoS(EnviaTrama20,fptr1);
		close(sockfd_CAAAREM);
	    return 1;
  }
  
  LeeCabecera(EnviaTrama20, olEsNoPedimento, charEnviosI);
  EnviosI = atoi(charEnviosI);

  sprintf(nombreArchivo, "%s", EnviaTrama20);

  if (LetraArchivo(nombreArchivo, olEsNoPedimento) == 0)
  {
   if (!olEsNoPedimento)
    nombreArchivo[0] = 'a';
   else
    nombreArchivo[0] = 'j';
  }
  else
  {
	  if(!olEsNoPedimento)
    nombreArchivo[0] = 'A';
   else
    nombreArchivo[0] = 'J';
  }
  
  nombreArchivo[12] = '\0';

  fprintf(fptr1,"Archivo a enviar <%s>\n", nombreArchivo);
  EnviaTramanl = TamArchivo(nombreArchivo);
  EnviaTramanlhtonl = htonl(EnviaTramanl);
  fprintf(fptr1,"\n Entero a enviar <%d> \n", EnviaTramanl);

  if ( !EnviaTramanl )
  {
    iIndAlterno=1;
    fprintf(fptr1,"[LlamaCAAAREM] Error 6: Falla Tamanio %d del Archivo[%s] -TamArchivo- HOST[%s] Puerto[%d] Alterno=%d result=%d\n"
	             ,EnviaTramanl,EnviaTrama20,strDireccion,serv_tcp_caaarem,iIndAlterno,result);
    fflush(fptr1);
	renombrarArchivoS(EnviaTrama20,fptr1);
	close(sockfd_CAAAREM);
	return 1;
  }


  fprintf(fptr1,"\n Envia a prevalidador tamanio de archivo <%d>  RED <%ld>", EnviaTramanl, sizeof(EnviaTramanlhtonl));

  if ( (result = write(sockfd_CAAAREM, &EnviaTramanlhtonl, sizeof(EnviaTramanlhtonl))) < 0)
  {
    iIndAlterno=1;
    fprintf(fptr1,"[LlamaCAAAREM] Error 7: Archivo[%s] No se escribio la longitud del pedimento -write- HOST[%s] Puerto[%d] Alterno=%d result=%d\n"
	             ,EnviaTrama20,strDireccion,serv_tcp_caaarem,iIndAlterno,result);
    fflush(fptr1);
	renombrarArchivoS(EnviaTrama20,fptr1);
	close(sockfd_CAAAREM);  
	return 1;
  }

  fprintf(fptr1, "\n El result es: <%d> \n", result);
  fflush(fptr1);

  if ( (result = read(sockfd_CAAAREM, &nacuse1, sizeof(nacuse1))) == -1)
  {
    iIndAlterno=1;
    fprintf(fptr1,"[LlamaCAAAREM] Error 8: Al leer el primer acuse -read- Archivo[%s] HOST[%s] Puerto[%d] Alterno=%d result=%d\n"
	             ,EnviaTrama20,strDireccion,serv_tcp_caaarem,iIndAlterno,result);
    fflush(fptr1);
	renombrarArchivoS(EnviaTrama20,fptr1);
	close(sockfd_CAAAREM);
	return 1;
  }

    fprintf(fptr1,"\n Se recibio acuse <%d> de cabecera y tamanio de archivo  \n", nacuse1);

    if (nacuse1 == 0)
    {
          fprintf(fptr1,"\n EnviArchivo: <%s>\n", EnviArchivo );

		  ptrbloque = (char *)malloc(EnviaTramanl + 1);
		  memset(ptrbloque,'\0',EnviaTramanl + 1);
		  sprintf(ptrbloque,"%s", EnviArchivo);
          ptrbloque[strlen(ptrbloque)] = '\0';

		  fprintf(fptr1,"[LlamaCAAAREM] EnviaTrama20 <%s>", EnviaTrama20);
		  LeeCabecera(EnviaTrama20, olEsNoPedimento, charEnviosI);
		  EnviosI = atoi(charEnviosI);

		  fprintf(fptr1,"[LlamaCAAAREM]: EnviArchivo <%s> a enviar <%d>", ptrbloque, EnviosI);
		  fprintf(fptr1,"[LlamaCAAAREM]: EnviArchivo <%s>", EnviArchivo);
		  fprintf(fptr1,"[LlamaCAAAREM] Caracteres a enviar:%ld\n", (strlen(ptrbloque)));
		  fprintf(fptr1,"[LlamaCAAAREM] Bloque a enviar <%s>\n", ptrbloque);

          if ( (result = write(sockfd_CAAAREM, ptrbloque, (strlen(ptrbloque)))) < 0)
          {
            iIndAlterno=1;
            fprintf(fptr1,"[LlamaCAAAREM] Error 9: No se pudo enviar el Archivo[%s] -write- HOST[%s] Puerto[%d] Alterno=%d result=%d\n"
  	                   ,EnviaTrama20,strDireccion,serv_tcp_caaarem,iIndAlterno,result);
            fflush(fptr1);
  	      renombrarArchivoS(EnviaTrama20,fptr1);
  	      close(sockfd_CAAAREM);
  	      return 1;
          }

          shutdown(sockfd_CAAAREM, SHUT_WR);
          if ( (result = read(sockfd_CAAAREM, (int *) &nacuse2, sizeof(nacuse2))) == -1)
          {
            iIndAlterno=1;
            fprintf(fptr1,"[LlamaCAAAREM] Error 10: Al leer el segundo acuse Archivo[%s] -read- HOST[%s] Puerto[%d] Alterno=%d result=%d\n"
  	                   ,EnviaTrama20,strDireccion,serv_tcp_caaarem,iIndAlterno,result);
            fflush(fptr1);
  	      renombrarArchivoS(EnviaTrama20,fptr1);
  	      close(sockfd_CAAAREM);
  	      return 1;
          }



		    if(numPreval != 4)
		    {
               sprintf(xnumero, "%08X", nacuse2);
               xnumero[8] = '\0';

               fprintf(fptr1,"EL NUMERO %d CONVERTIDO EN HEXADECIMAL ES %s\n", nacuse2, xnumero);

               strncpy(byte1, xnumero, 2);
               byte1[2] = '\0';
               fprintf(fptr1,"BYTE1[%s]\n", byte1);

               strncpy(byte2, xnumero +2, 2);
               byte2[2] = '\0';
               fprintf(fptr1,"BYTE2[%s]\n", byte2);

               strncpy(byte3, xnumero + 4, 2);
               byte3[2] = '\0';
               fprintf(fptr1,"BYTE3[%s]\n", byte3);

               strncpy(byte4, xnumero  + 6 , 2);
               byte4[2] = '\0';
               fprintf(fptr1,"BYTE4[%s]\n", byte4);

               sprintf(xinvertido, "%s%s%s%s", byte4, byte3, byte2, byte1);
               xinvertido[8] = '\0';

               hacuse2 = Convert(xinvertido, 16);
		    }

            fprintf(fptr1,"SE RECIBE FORMATO RED <%d> CONVERTIDO A ENTERO <%d>\n", nacuse2, hacuse2);

            fprintf(fptr1,"\n Acuse Archivo net <%d> \n", nacuse2);

            fprintf(fptr1, "\n Acuse Archivo host <%d> \n", hacuse2);

            fflush(fptr1);

            if (hacuse2 == 0)
            {
					fprintf(fptr1,"\n BanCAAAREM: Cabecera y Archivo aceptados.  \n");
            }
            else
            {
               fprintf(fptr1,"\n BanCAAAREM: Archivo Rechazado. %d \n", hacuse2);
            }
    }
    else
        fprintf(fptr1,"\n Prevalidador rechaza cabecera. No se envia archivo. %d \n", hacuse1);

    fflush(fptr1);

    close(sockfd_CAAAREM);

	if (ptrbloque)
		free(ptrbloque);
	
	if(iIndAlterno)
	{
      fprintf(fptr1,"[LlamaCAAAREM] Error 11: Archivo[%s]  HOST[%s] Puerto[%d] Alterno=%d result=%d\n"
	             ,EnviaTrama20,strDireccion,serv_tcp_caaarem,iIndAlterno,result);
      fflush(fptr1);
	  renombrarArchivoS(EnviaTrama20,fptr1);
	}
    return iIndAlterno;

}
